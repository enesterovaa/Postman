{
	"info": {
		"_postman_id": "5079145a-21b6-48e8-b6c0-6e011efcb1e6",
		"name": "HW_2_Nesterova_Katya",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20865479"
	},
	"item": [
		{
			"name": "1. First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"// В body приходит \"This is the first responce from server\""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос. \r",
							"// http://162.55.220.72:5005/user_info_3  -> Send\r",
							"\r",
							"// 2. Статус код 200\r",
							"// Добавила сниппет проверки статус кода в общие тесты коллекции\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name в request (name вбить руками)\r",
							"\r",
							"pm.test(\"Check name (manual)\", function () {\r",
							"    pm.expect(\"Ekaterina\").to.eql(resp.name);\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age в request (age вбить руками)\r",
							"pm.test(\"Check age (manual)\", function () {\r",
							"    pm.expect(\"31\").to.eql(resp.age);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary в request (salary вбить руками.)\r",
							"pm.test(\"Check salary(manual)\", function () {\r",
							"    pm.expect(1000).to.eql(resp.salary);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Check name (from request)\", function () {\r",
							"    pm.expect(req.name).to.eql(resp.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Check age (from request)\", function () {\r",
							"    pm.expect(req.age).to.eql(resp.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary в request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check salary (from request)\", function () {\r",
							"    pm.expect(Number(req.salary)).to.eql(resp.salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(\"Family\", resp.family);\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"Check u_salary_1_5_year * 4 (salary from request)\", function () {\r",
							"    pm.expect(req.salary * 4).to.eql(resp.family.u_salary_1_5_year);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ekaterina",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// http://162.55.220.72:5005/object_info_3?name=Ekaterina&age=31&salary=1000  -> Send\r",
							"\r",
							"// 2. Статус код 200\r",
							"// Добавила сниппет проверки статус кода в общие тесты коллекции\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"console.log(\"Response\", resp);\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()  \r",
							"console.log(\"Request\", req);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request)\r",
							"pm.test(\"Check name (from request)\", function () {\r",
							"    pm.expect(req.name).to.eql(resp.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age в request (age забрать из request)\r",
							"pm.test(\"Check age (from request)\", function () {\r",
							"    pm.expect(req.age).to.eql(resp.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary в request (salary забрать из request)\r",
							"pm.test(\"Check salary (from request)\", function () {\r",
							"    pm.expect(Number(req.salary)).to.eql(resp.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(\"Family\", resp.family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметр name.\r",
							"pm.test(\"Parameter 'dog' has parameter 'name'\", function () {  \r",
							"    pm.expect(resp.family.pets.dog).to.haveOwnProperty(\"name\");   \r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Parameter 'dog' has parameter 'age'\", function () {  \r",
							"    pm.expect(resp.family.pets.dog).to.haveOwnProperty(\"age\");   \r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Parameter 'dog.name' has value 'Luky'\", function () {  \r",
							"    pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\");   \r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Parameter 'dog.age' has value '4'\", function () {  \r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4);   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Ekaterina&age=31&salary=1000&=",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ekaterina"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1000"
						},
						{
							"key": "",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4. Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// http://162.55.220.72:5005/object_info_4?name=Ekaterina&age=31&salary=1000\r",
							"\r",
							"// 2. Статус код 200\r",
							"// Добавила сниппет проверки статус кода в общие тесты коллекции\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"console.log(\"Response\", resp);\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()  \r",
							"console.log(\"Request\", req);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(req.name).to.eql(resp.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(Number(req.age)).to.eql(resp.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(resp.salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp.salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"Check salary parameter [0]\", function () {\r",
							"    pm.expect(Number(req.salary)).to.eql(resp.salary[0]);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"Check salary parameter [1]\", function () {\r",
							"    pm.expect(Number(req.salary*2)).to.eql(Number(resp.salary[1]));\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"pm.test(\"Check salary parameter [2]\", function () {\r",
							"    pm.expect(Number(req.salary*3)).to.eql(Number(resp.salary[2]));\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// Environments -> + -> HW_2 -> name; age; salary. Значения оставить пустыми.\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", req.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", req.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", req.salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i of resp.salary) {  \r",
							"console.log(i);  \r",
							"\t}\r",
							"\r",
							"    console.log(resp);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Ekaterina&age=31&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ekaterina"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5. User_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"console.log(\"Response\", resp);\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = pm.request.url.query.toObject() \r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Response has parameter 'start_qa_salary'\", function () {  \r",
							"    pm.expect(resp).to.haveOwnProperty(\"start_qa_salary\");   \r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response has parameter 'qa_salary_after_6_months'\", function () {  \r",
							"    pm.expect(resp).to.haveOwnProperty(\"qa_salary_after_6_months\");   \r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response has parameter 'qa_salary_after_12_months'\", function () {  \r",
							"    pm.expect(resp).to.haveOwnProperty(\"qa_salary_after_12_months\");   \r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Response has parameter 'qa_salary_after_1.5_year'\", function () {  \r",
							"    pm.expect(resp).to.haveOwnProperty(\"qa_salary_after_1.5_year\");   \r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Response has parameter 'qa_salary_after_3.5_year'\", function () {  \r",
							"    pm.expect(resp).to.haveOwnProperty(\"qa_salary_after_3.5_years\");   \r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response has parameter 'person'\", function () {  \r",
							"    pm.expect(resp).to.haveOwnProperty(\"person\");   \r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request) \r",
							"pm.test(\"Check start_qa_salary parameter\", function () {\r",
							"    pm.expect(Number(req.salary)).to.eql(Number(resp.start_qa_salary));\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"Check qa_salary_after_6_months parameter\", function () {\r",
							"    pm.expect(Number(req.salary * 2)).to.eql(Number(resp.qa_salary_after_6_months));\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"pm.test(\"Check qa_salary_after_12_months parameter\", function () {\r",
							"    pm.expect(Number(req.salary * 2.7)).to.eql(Number(resp.qa_salary_after_12_months));\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"pm.test(\"Check qa_salary_after_1.5_year parameter\", function () {\r",
							"    pm.expect(Number(req.salary * 3.3)).to.eql(Number(resp['qa_salary_after_1.5_year']));\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"pm.test(\"Check qa_salary_after_3.5_years parameter\", function () {\r",
							"    pm.expect(Number(req.salary * 3.8)).to.eql(Number(resp['qa_salary_after_3.5_years']));\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\r",
							"pm.test(\"Check person parameter [1] (u_name)\", function () {\r",
							"    pm.expect(Number(req.salary)).to.eql(Number(resp.person.u_name[1]));\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request)\r",
							"pm.test(\"Check u_age parameter\", function () {\r",
							"    pm.expect(Number(req.age)).to.eql(resp.person.u_age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"pm.test(\"Check qa_salary_5_years parameter\", function () {\r",
							"    pm.expect(Number(req.salary * 4.2)).to.eql(Number(resp.person.u_salary_5_years));\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person. \r",
							"\r",
							"for (let i in resp.person) {  \r",
							"console.log(i);  \r",
							"\t}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ekaterina",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}